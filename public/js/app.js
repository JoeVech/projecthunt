class Game {
    constructor() {
        this.initDebugTools();
        this.tg = new TelegramIntegration();
        this.ar = new ARConfig();
        this.initUI();
    }

    initDebugTools() {
        window.appDebug = {
            log: (message) => {
                const timestamp = new Date().toISOString().substr(11, 12);
                console.log(`[${timestamp}] DEBUG: ${message}`);
            },
            showForceReload: () => {
                const btn = document.createElement('button');
                btn.textContent = '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞';
                btn.style.position = 'fixed';
                btn.style.bottom = '20px';
                btn.style.right = '20px';
                btn.style.zIndex = 10000;
                btn.onclick = () => window.location.reload();
                document.body.appendChild(btn);
            }
        };
    }

    initUI() {
        this.startButton = document.getElementById('startButton');
        this.status = document.getElementById('status');
        
        this.startButton.onclick = () => {
            window.appDebug.log('–ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞');
            this.startAR();
        };
    }

    async startAR() {
        try {
            window.appDebug.showForceReload();
            this.lockUI();
            
            window.appDebug.log('–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AR');
            await this.ar.initialize();
            
            window.appDebug.log('AR —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            this.showScene();
            
            this.setupEventListeners();

        } catch(error) {
            window.appDebug.log(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
            this.handleError(error);
        }
    }

    lockUI() {
        this.startButton.disabled = true;
        this.status.textContent = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...';
        this.status.style.color = 'yellow';
    }

    showScene() {
        document.querySelector('.loader').classList.add('hidden');
        document.querySelector('a-scene').classList.remove('hidden');
        this.status.textContent = '–ò—â–∏—Ç–µ –ø–ª–æ—Å–∫—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å...';
        this.status.style.color = 'white';
    }

    setupEventListeners() {
        this.ar.scene.addEventListener('arjs-plane-detected', () => {
            window.appDebug.log('–ü–ª–æ—Å–∫–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
            document.getElementById('animal').setAttribute('visible', 'true');
            this.status.classList.add('hidden');
        });
    }

    handleError(error) {
        console.error('Critical Error:', error);
        this.status.innerHTML = this.getErrorMessageHtml(error);
        this.status.style.color = 'red';
        this.ar.cleanup();
    }

    getErrorMessageHtml(error) {
        const messages = {
            'NotAllowedError': `
                <div class="error-header">üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ</div>
                <div class="error-description">
                    1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –∑–∞–º–∫–∞ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ<br>
                    2. –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞"<br>
                    3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
                </div>
            `,
            'TimeoutError': `
                <div class="error-header">‚è≥ –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</div>
                <div class="error-description">
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:<br>
                    1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É<br>
                    2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ<br>
                    3. –ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∫–∞–º–µ—Ä—É
                </div>
            `,
            'default': `
                <div class="error-header">‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</div>
                <div class="error-description">
                    ${error.message}<br>
                    –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.name}
                </div>
            `
        };

        return `
            <div class="error-container">
                ${messages[error.name] || messages.default}
                <button class="retry-button" onclick="window.location.reload()">
                    ‚ü≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
                <div class="debug-info">
                    ${JSON.stringify(window.APP_DEBUG, null, 2)}
                </div>
            </div>
        `;
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new Game();
    console.log('APP_DEBUG:', window.APP_DEBUG);
});
